using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsControlLibrary;
using DevExpress.XtraEditors;
using LeagueManagement_DX.CustomControlLibrary;
using System.IO;
using System.Data.SqlClient;
using DevExpress.Data;
using DevExpress.XtraTab;
using DevExpress.XtraGrid.Columns;

namespace LeagueManagement_DX.Forms
{
    public partial class TourManagement : DevExpress.XtraEditors.XtraForm
    {
        #region Properties

        public int TourID { get; set; }

        #endregion

        LeagueManagement_DX.LeagueDatabaseDataSet.ToursRow tourRow;

        public LeagueManagement_DX.LeagueDatabaseDataSet.ToursRow TourRow
        {
            get
            {
                if (tourRow.RowState == DataRowState.Detached)
                {
                    this.toursTableAdapter.Fill(leagueDatabaseDataSet.Tours);
                    return (tourRow = this.leagueDatabaseDataSet.Tours.FindById(this.TourID));
                }
                return tourRow;
            }
            set
            {
                tourRow = value;
                if(value != null)
                this.TourID = value.Id;
            }
        }

        LeagueManagement_DX.LeagueDatabaseDataSet.MatchRow matchRow;
        LeagueManagement_DX.LeagueDatabaseDataSet.TeamRow teamRow;

        DataView dataview;

        public Image Image
        {
            get
            {
                return this.pictureEdit_TourLogo.Image;

            }
        }
        public XtraTabPage TabPage
        {
            get
            {
                return this.TabControl.SelectedTabPage;
            }
        }
        public override void Refresh()
        {
            this.toursTableAdapter.Fill(leagueDatabaseDataSet.Tours);
            this.TourRow = leagueDatabaseDataSet.Tours.FindById(TourID);
            this.binding(this.TourRow);
            this.Text = this.TourRow.TourName;
            this.LoadImage(TourRow.Avatar);
        }
        public TourManagement()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            this.pictureEdit_TourLogo.Properties.ContextMenuStrip = new ContextMenuStrip();
            // this.teamTableAdapter1.FillByTour(this.leagueDatabaseDataSet1.Team,m_tourid);
            //  this.reportTeamByTourTableAdapter1.Fill(this.leagueDatabaseDataSet1.ReportTeamByTour, m_tourid);
            
        }

        private void removeItem_Click(object sender, EventArgs e)
        {
           // this.registrationTableAdapter.Fill(this.leagueDatabaseDataSet.Registration);
            
        }

        public TourManagement(DataRow datarow)
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            this.TourRow  = (datarow as LeagueManagement_DX.LeagueDatabaseDataSet.ToursRow);
            this.pictureEdit_TourLogo.Properties.ContextMenuStrip = new ContextMenuStrip();

            // this.teamTableAdapter1.FillByTour(this.leagueDatabaseDataSet1.Team,m_tourid);
            //  this.reportTeamByTourTableAdapter1.Fill(this.leagueDatabaseDataSet1.ReportTeamByTour, m_tourid);


            // tab Match

            this.teamList1.flowLayoutPanel.ControlAdded += flowLayoutPanel_ControlAdded;
        }

        private void flowLayoutPanel_ControlAdded(object sender, ControlEventArgs e)
        {
            var item = (e.Control as ControlListItem);
            if (UserAccessLevel.Instance.GetAccessLevel > 1)
            {
                var menustripItem = new ToolStripMenuItem("Remove") { Name = "removeitem" };
                if (item == null) return;
                item.MenuStrip.Items.Add(menustripItem);
                item.MenuStrip.ItemClicked += MenuStrip_ItemClick;
            }
            item.MenuStrip.Items.RemoveByKey("deleteItem");
            item.MenuStrip.Items.RemoveByKey("editItem");
        }
        private void XtraForm1_Load (object sender, EventArgs e)
        {
            
            var parent = this.MdiParent as MainManagement;
            if (parent != null)
            parent.DisableDeleteTeamInTour();
            // TODO: This line of code loads data into the 'leagueDatabaseDataSet.Team' table. You can move, or remove it, as needed.
            this.teamTableAdapter.Fill(this.leagueDatabaseDataSet.Team);
            // TODO: This line of code loads data into the 'leagueDatabaseDataSet.Team' table. You can move, or remove it, as needed.
            this.teamTableAdapter.Fill(this.leagueDatabaseDataSet.Team);
            this.teamJoinTourTableAdapter.Fill(leagueDatabaseDataSet.TeamJoinTour);

            int tourId = this.TourRow.Id;
            this.teamList1.LoadDataFromTable(tourId);

            this.binding(TourRow);
            this.LoadImage(TourRow.Avatar);


            //load team          
            //load match và setting match
            this.matchList.TourID = tourId;
            this.matchList.LoadDataFromTable();

            this.simpleButtonCreateMatch.Enabled = false;
            this.dateTimePickerForeseeDate.Value = DateTime.Now;

            groupControl2.Width = 940;
            groupControlCreatematch.Hide();


            //VINH
            teamGrid.TourId = TourRow.Id;
            teamGrid.SortTeam(TourRow.Priority);

            PlayerTab_Load();
            if (UserAccessLevel.Instance.GetAccessLevel == 1)
            {
                this.Button_Edit.Enabled = false;
                this.Button_Delete.Enabled = false;
                matchList.SetLevelAccess(1);
            }
        }

        public void ReloadTeamMatchStandingTab()
        {

            int tourId = this.TourRow.Id;
            this.teamList1.LoadDataFromTable(tourId);
            //load team          
            //load match và setting match
            ReloadMatchList();

            this.simpleButtonCreateMatch.Enabled = false;
            this.dateTimePickerForeseeDate.Value = DateTime.Now;

            groupControl2.Width = 940;
            groupControlCreatematch.Hide();


            //VINH
            teamGrid.TourId = TourRow.Id;
            teamGrid.SortTeam(TourRow.Priority);
        }

        public void ReloadMatchList()
        {
            this.matchList.TourID = this.TourRow.Id;
            this.matchList.LoadDataFromTable();
            
        }

        public void ReloadMatchList(int id)
        {
            matchList.ReloadItem(id);
        }

        private void MenuStrip_ItemClick(object sender, ToolStripItemClickedEventArgs e)
        {
            if (e.ClickedItem.Name == "removeitem")
            {
                this.registrationTableAdapter.Fill(this.leagueDatabaseDataSet.Registration);
                this.teamJoinTourTableAdapter.Fill(this.leagueDatabaseDataSet.TeamJoinTour);
                int teamid = Convert.ToInt32(this.teamList1.GetSelected().DataRowItem["Id"]);

                var teamjointour = this.leagueDatabaseDataSet.TeamJoinTour.FindByTourIdTeamId(TourRow.Id, teamid);
                teamjointour.Delete();
                (sender as ContextMenuStrip).Hide();
                try
                {
                    this.teamJoinTourTableAdapter.Update(teamjointour);
                    this.leagueDatabaseDataSet.AcceptChanges();

                    this.teamList1.LoadDataFromTable(TourRow.Id);
                }
                catch (SqlException sqle)
                {
                    foreach (SqlError error in sqle.Errors)
                    {
                        switch (error.Number)
                        {
                            case 50000:
                                if (error.Procedure == "TeamJoinTour_Delete")
                                {
                                    MessageBox.Show(error.Message, "error", MessageBoxButtons.OK,MessageBoxIcon.Error);
                                }
                                break;
                            default:
                                break;
                        }
                    }
                    this.leagueDatabaseDataSet.RejectChanges();
                }
            }
        }
        public void LoadImage(string _stringpath)
        {
            if (File.Exists(_stringpath))
            {
                this.pictureEdit_TourLogo.Image = Image.FromFile(_stringpath);
            }
        }

        private void binding(LeagueDatabaseDataSet.ToursRow _tourRow)
        {

            this.label_TourName.Text = TourRow.TourName;
            this.textBox_BeginDate.Text = TourRow.BeginDate.ToString();
            this.textBox2_EndDate.Text = TourRow.EndDate.ToString();
            this.textBox_MinPlayer.Text = TourRow.PlayerMin.ToString();
            this.textBox_MaxPlayer.Text = TourRow.PlayerMax.ToString();
            this.textBox_AgeMin.Text = TourRow.PlayerAgeMin.ToString();
            this.textBox_AgeMax.Text = TourRow.PlayerAgeMax.ToString();
            this.textBox_MinForeignPlayer.Text = TourRow.ForeignMin.ToString();
            this.textBox_MaxForeignPlayer.Text = TourRow.ForeignMax.ToString();
            this.textBox_Win.Text = TourRow.WinRatio.ToString();
            this.textBox_Lose.Text = TourRow.LoseRatio.ToString();
            this.textBox_Draw.Text = TourRow.DrawRatio.ToString();
            this.textBox_Rounds.Text = TourRow.Rounds.ToString();
            this.textBox_MatchTime.Text = TourRow.TimeMatch.ToString();
            this.textBox_Priority.Text = TourRow.Priority;
            this.textBox_MaxSubstitution.Text = TourRow.SubPlayerMax.ToString();
            this.textBox_MaxSwiching.Text = TourRow.SwitchMax.ToString();
        }

        private void TourManagement_SizeChanged(object sender, EventArgs e)
        {
            int x = this.Size.Width / 2 - this.groupControl1.Size.Width / 2;
            int y = this.Size.Height / 2 - this.groupControl1.Size.Height / 2;
            this.groupControl1.Location = new Point(Math.Max(x,0), Math.Max(y,0));
        }

        private void textBox_Priority_TextChanged(object sender, EventArgs e)
        {
            switch ((sender as TextBox).Text)
            {
                case "PADV": (sender as TextBox).Text = "Point - Away - Goal Differences - Versus"; break;
                case "PVAD": (sender as TextBox).Text = "Point - Versus - Away - Goal Differences"; break;
                case "PVDA": (sender as TextBox).Text = "Point - Versus - Goal Differences - Away"; break;
                case "PDVA": (sender as TextBox).Text = "Point - Goal Differences - Versus - Away"; break;
                default:
                    break;
            }
        }

        private void Button_Edit_Click(object sender, EventArgs e)
        {
            if (Image != null)
                this.Image.Dispose();
            int id = TourRow.Id;
            var mainManagement = this.ParentForm as MainManagement;
            if (mainManagement != null)
            {
                //mainManagement.ShowAddTourForm(this.TourRow);//mở form để sửa
                mainManagement.ShowAddTourForm(
                    mainManagement.GetTourItem().DataRowItem as LeagueManagement_DX.LeagueDatabaseDataSet.ToursRow);
            }
            // lúc này form đã đóng
            //DataView dv = TourRow.Table.DefaultView;
            //dv.RowFilter = "Id = " + id.ToString();
            //this.TourRow = dv[0].Row as LeagueManagement_DX.LeagueDatabaseDataSet.ToursRow; //sai

            //this.toursTableAdapter.Fill(leagueDatabaseDataSet.Tours);
            //this.TourRow = this.leagueDatabaseDataSet.Tours.FindById(id) as LeagueManagement_DX.LeagueDatabaseDataSet.ToursRow;
            //binding(this.TourRow);
            //if (TourRow != null)
            //{
            //    this.LoadImage(TourRow.Avatar);
            //    this.Text = TourRow.TourName;
            //}
            this.Refresh();
        }

        private void Button_Delete_Click(object sender, EventArgs e)
        {
            var rs = MessageBox.Show("Delete tour make lose all of data in that tour.\nDo you want to continue?", "Warning",
                MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button1);
            if (rs == System.Windows.Forms.DialogResult.OK)
            {
                //delete here
                var mainManagement = this.MdiParent as MainManagement;
                if (mainManagement != null) mainManagement.RemoveTourRow(TourRow);
                this.Close();
            }
        }

        private void TourManagement_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (pictureEdit_TourLogo.Image != null)
                this.pictureEdit_TourLogo.Image.Dispose();
        }

        public void RemoveRegistedTeam()
        {
            if (this.TabControl.SelectedTabPage != teamTabPage)
                return;
            var teamitem = this.teamList1.GetSelected() as TeamControlListItem;
            if (teamitem == null)
                return;
            var teamRow = teamitem.DataRowItem as LeagueManagement_DX.LeagueDatabaseDataSet.TeamRow;
            LeagueManagement_DX.LeagueDatabaseDataSet.TeamJoinTourRow teamjointourRow
                = this.leagueDatabaseDataSet.TeamJoinTour.FindByTourIdTeamId(this.TourID, teamRow.Id);

            teamjointourRow.Delete();
            try
            {
                this.teamJoinTourTableAdapter.Update(teamjointourRow);
                this.leagueDatabaseDataSet.AcceptChanges();
                this.teamList1.Remove(teamitem);
                //this.teamList1.LoadDataFromTable(TourID);
            }
            catch (SqlException sqle)
            {
                foreach (var error in sqle.Errors)
                {
                    switch ((error as SqlError).Number)
                    {
                        case 50000: 
                        if (sqle.Procedure == "TeamJoinTour_Delete")
                        {
                            string msg = "Can not remove this team, may be one or more match exists";
                            MessageBox.Show(msg, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        break;
                    }
                }
                this.leagueDatabaseDataSet.RejectChanges();
                //throw;
            }
        }

        
        /// xu li tab match

        public void ClearMatchBeforeAddNew()
        {
            this.AddTeamToCombobox();
            this.pictureEditHome.Image = this.pictureEditAway.Image = null;
            this.comboBoxEditHome.SelectedIndex = this.comboBoxEditAway.SelectedIndex = -1;
            this.customTextBoxRound.Text = null;
            this.labelControlAway.Text = this.labelControlHome.Text = this.labelControlRound.Text = this.labelControlStadium.Text = "null";
            this.rickTextBox_message.Text = null;
        }
        private void AddTeamToCombobox()
        {
            while (this.comboBoxEditHome.Properties.Items.Count > 0 && this.comboBoxEditAway.Properties.Items.Count > 0)
            {
                this.comboBoxEditHome.Properties.Items.RemoveAt(0);
                this.comboBoxEditAway.Properties.Items.RemoveAt(0);
            }
            this.reportTeamByTourTableAdapter.FillBy(leagueDatabaseDataSet.ReportTeamByTour, TourRow.Id);
            foreach (DataRow i in leagueDatabaseDataSet.ReportTeamByTour)
            {
                this.comboBoxEditHome.Properties.Items.Add(i["Name"]);
                this.comboBoxEditAway.Properties.Items.Add(i["Name"]);
            }
        }
        public void SelectMatchTabPage(bool IsDeleteMatch)
        {
            this.matchTabPage.Show();
            if (IsDeleteMatch)
            {
                matchList.RemoveSelected();
            }
            else
            {
                groupControl2.Width = 435;
                
                groupControlCreatematch.Show();
                this.ClearMatchBeforeAddNew();             
            }
        }
        
        private void simpleButtonCreateMatch_Click(object sender, EventArgs e)
        {
            string msg = "";
            matchBindingSource.AddNew();
            DataRow currRow = ((DataRowView)((CurrencyManager)matchBindingSource.CurrencyManager).Current).Row;
            currRow["TourId"] = this.TourRow.Id;
            DataRow[] homeId = leagueDatabaseDataSet.Tables["Team"].Select(string.Format("CONVERT({0},System.String) LIKE '%{1}'", "Name", this.comboBoxEditHome.SelectedItem.ToString()));
            currRow["Home"] = homeId[0]["Id"];
            DataRow[] AwayId = leagueDatabaseDataSet.Tables["Team"].Select(string.Format("CONVERT({0},System.String) LIKE '%{1}'", "Name", this.comboBoxEditAway.SelectedItem.ToString()));
            currRow["Away"] = AwayId[0]["Id"];
            currRow["ForeseeDate"] = this.dateTimePickerForeseeDate.Value;
            
            try
            {
                currRow["Round"] = Convert.ToInt32(this.customTextBoxRound.Text);

                matchBindingSource.EndEdit();
                matchTableAdapter.Update(leagueDatabaseDataSet);
                leagueDatabaseDataSet.AcceptChanges();
                matchList.LoadDataFromTable();
                rickTextBox_message.Text += "Create match success !!\n";
                rickTextBox_message.SelectionStart = rickTextBox_message.Text.Length;
                rickTextBox_message.ScrollToCaret();              
            }            
            catch (SqlException sqle)
            {
                
                foreach (var error in sqle.Errors)
                {
                    switch ((error as SqlError).Number)
                    {
                        //case 2627:
                        //    rs = this.Exception_Duplicate_TourName((error as SqlError).Message);
                        //    break;
                        case 547:
                            if ((error as SqlError).Message.Contains("CK_MATCH_HOME_AWAY"))
                            {
                                msg = Exception_CK_MATCH_HOME_AWAY((error as SqlError).Message);
                                break;
                            }
                            break;
                        case 50000:
                            if ((error as SqlError).Procedure == "Trigger_Match_INSERT_UPDATE_ROUNDS")
                            {
                                msg = ((error as SqlError).Message);
                                break;
                            }
                            if ((error as SqlError).Procedure == "Trigger_Match_InsertUpdate_Round")
                            {
                                msg = ((error as SqlError).Message);
                                break;
                            }
                            if ((error as SqlError).Procedure == "Trigger_Match_Time_InsertUpdate")
                            {
                                msg = ((error as SqlError).Message);
                                break;
                            }
                            if ((error as SqlError).Procedure == "TRIGGER_Match_Home_Away_Round_UNIQUE")
                            {
                                msg = ((error as SqlError).Message);
                                break;
                            }
                            if ((error as SqlError).Procedure == "TRIGGER_Match_Count_Number_Play_In_Home")
                            {
                                msg = ((error as SqlError).Message);
                                break;
                            }
                            break;
                        default:
                            {
                                break;
                            }
                    }

                }                
            }
            catch (System.ArgumentException)
            {
                msg = "Round is to big";
            }
            if (msg == "")
                return;
            matchBindingSource.RemoveCurrent();
            rickTextBox_message.Text += "Create match unsuccess !!\n";
            rickTextBox_message.Text += msg + "\n";
            rickTextBox_message.SelectionStart = rickTextBox_message.Text.Length;
            rickTextBox_message.ScrollToCaret(); 

        }
        private string Exception_CK_MATCH_HOME_AWAY(string p)
        {
            string msg = "Home and Away must difference.";
            return msg;
        }

        private void simpleButtonCancelMatch_Click(object sender, EventArgs e)
        {
            matchBindingSource.CancelEdit();

            groupControl2.Width = 940;
            groupControlCreatematch.Hide();
        }

        private void comboBoxEditHome_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.comboBoxEditHome.SelectedIndex < 0)
                return;
            string avatarpath = this.FindAvatarTeamSelectedInCombobox(this.comboBoxEditHome.Text);
            this.loadImage(avatarpath, this.pictureEditHome);
            this.labelControlHome.Text = this.comboBoxEditHome.Text;
            string stadium = "null";
            foreach (DataRow i in leagueDatabaseDataSet.ReportTeamByTour)
            {
                if (i["Name"].ToString() == this.comboBoxEditHome.Text)
                    stadium = i["Stadium"].ToString();
            }
            this.labelControlStadium.Text = stadium;
            if (this.comboBoxEditAway.SelectedIndex >= 0 && this.comboBoxEditHome.SelectedIndex >= 0 && this.customTextBoxRound.Text != "" && this.customTextBoxRound.CheckCodition())
                this.simpleButtonCreateMatch.Enabled = true;
        }

        private void comboBoxEditAway_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.comboBoxEditAway.SelectedIndex < 0)
                return;
            this.labelControlAway.Text = this.comboBoxEditAway.Text;
            string avatarpath = this.FindAvatarTeamSelectedInCombobox(this.comboBoxEditAway.Text);
            this.loadImage(avatarpath, this.pictureEditAway);
            if (this.comboBoxEditAway.SelectedIndex >= 0 && this.comboBoxEditHome.SelectedIndex >= 0 && this.customTextBoxRound.Text != "" && this.customTextBoxRound.CheckCodition())
                this.simpleButtonCreateMatch.Enabled = true;
        }

        private void dateTimePickerForeseeDate_ValueChanged(object sender, EventArgs e)
        {
            this.labelControlDate.Text = this.dateTimePickerForeseeDate.Value.ToShortDateString();
        }

        private void customTextBox_Paint(object sender, PaintEventArgs e)
        {
            if (this.customTextBoxRound.CheckCodition() &&this.comboBoxEditAway.SelectedIndex >= 0 && this.comboBoxEditHome.SelectedIndex >= 0)
            {               
                this.simpleButtonCreateMatch.Enabled = true;
            }                     
            foreach (var control in this.groupControlCreatematch.Controls)
            {
                if (control is CustomTextBox)
                {
                    if ((control as CustomTextBox).CheckCodition() == false)
                    {
                        this.simpleButtonCreateMatch.Enabled = false;
                        return;
                    }
                }
            }
        }
        private void loadImage(string _stringpath, PictureEdit team)
        {
            team.Image = null;
            team.ContextMenuStrip = new ContextMenuStrip();
            team.ContextMenuStrip.Enabled = false;
            if (File.Exists(_stringpath))
            {
                team.Image = Image.FromFile(_stringpath);
            }
        }
        private string FindAvatarTeamSelectedInCombobox(string name)
        {
            this.teamTableAdapter.Fill(leagueDatabaseDataSet.Team);
            DataView dv = leagueDatabaseDataSet.Team.DefaultView;
            dv.RowFilter = "Name = " + "'" + name + "'";
            this.teamRow = dv[0].Row as LeagueManagement_DX.LeagueDatabaseDataSet.TeamRow;
            if (teamRow != null) return teamRow.Avatar;

            return String.Empty;
        }
        

        public void ReloadTeamList()
        {
            this.teamList1.LoadDataFromTable(this.TourRow.Id);
            this.AddTeamToCombobox();
        }
        public void RemoveImage()
        {
            if (File.Exists(TourRow.Avatar))
            {
                if (pictureEdit_TourLogo.Image != null)
                    this.pictureEdit_TourLogo.Image.Dispose();
                File.Delete(TourRow.Avatar);
            }
        }

        private void textBox_Date_TextChanged(object sender, EventArgs e)
        {
            var textbox = (sender as TextBox);
            if (textbox == null) return;

            if (string.IsNullOrEmpty(textbox.Text))
                return;
            textbox.Text = Convert.ToDateTime(textbox.Text).ToShortDateString();
        }

        private void customTextBoxRound_xTextChanged(object sender, EventArgs e)
        {
            if (this.customTextBoxRound.CheckCodition())
                this.labelControlRound.Text = this.customTextBoxRound.Text;
        }

        private void searchControl1_TextChanged(object sender, EventArgs e)
        {
            var value = searchControl1.Text;

            if (searchControl1.Text != "")
            {
                teamGrid.GridView.Columns["Name"].FilterInfo = new ColumnFilterInfo("[Name] LIKE '" + value + "%'");
            }
            else
            {
                teamGrid.GridView.Columns["Name"].FilterInfo = new ColumnFilterInfo();    
            }
        }

        private void TabControl_SelectedPageChanged(object sender, TabPageChangedEventArgs e)
        {
            //VINH
            if (e.Page == standingTabPage)
            {
                teamGrid.SortTeam(TourRow.Priority);
            }
            else if (e.Page == playersTabPage)
            {
                //Reload Player List
                playerGrid.LoadAllPlayerByTour(TourID, false);
                noGoalCheck.Checked = false;

                foreach (GridColumn column in playerGrid.GridView.Columns)
                {
                    column.FilterInfo = new ColumnFilterInfo();
                }
                numberPlayers.Text = playerGrid.GridView.RowCount.ToString();
            }

            var parent = this.MdiParent as MainManagement;
            if (parent == null) return;

            if (e.Page != teamTabPage)
            {
                parent.DisableDeleteTeamInTour();
            }
            else
            {
                parent.EnableDeleteTeamInTour();
                teamList1.LoadDataFromTable(TourID);
            }
            if (e.Page != matchTabPage)
            {
                parent.DisableDeleteMatch();
            }
            else
            {
                parent.EnableDeleteMatch();
            }
        }
        public int GetTeamPosition(string teamName)
        {
            teamGrid.SortTeam(TourRow.Priority);
            return teamGrid.GetPosition(teamName);
        }


        //VINH
        private void PlayerTab_Load()
        {
            playerGrid.LoadAllPlayerByTour(TourID, false);
            numberPlayers.Text = playerGrid.GridView.RowCount.ToString();

            playerGrid.GridView.Columns["Goals"].SortOrder = ColumnSortOrder.Descending;
            numberPlayers.Text = playerGrid.GridView.RowCount.ToString();
            clearSearchBtn.AllowFocus = false;
            noGoalCheck.AllowFocus = false;
        }

        private void searchPlayerControl_TextChanged(object sender, EventArgs e)
        {
            playerGrid.SearchPlayers(searchPlayerControl.Text, searchComboBox.Text);
            numberPlayers.Text = playerGrid.GridView.RowCount.ToString();
        }

        private void noGoalCheck_CheckedChanged(object sender, EventArgs e)
        {
            var check = sender as CheckButton;
            if (check == null) return;

            if (check.Checked)
            {
                playerGrid.ClearGridPlayerInTour();
                playerGrid.LoadAllPlayerByTour(this.TourID);
                numberPlayers.Text = playerGrid.GridView.RowCount.ToString();
                noGoalCheck.ForeColor = Color.White;
                noGoalCheck.Text = "Hide Players No Goal";
            }
            else
            {
                playerGrid.ClearGridPlayerInTour();
                playerGrid.LoadAllPlayerByTour(this.TourID, false);
                numberPlayers.Text = playerGrid.GridView.RowCount.ToString();
                noGoalCheck.ForeColor = Color.Black;
                noGoalCheck.Text = "Show Players No Goal";
            }
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            foreach (GridColumn column in playerGrid.GridView.Columns)
            {
                column.FilterInfo = new ColumnFilterInfo();
            }
            numberPlayers.Text = playerGrid.GridView.RowCount.ToString();
        }
    }
}